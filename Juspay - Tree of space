#############################################################################################################QUESTION######################################################################################################################
Given a world map in the form of Generic M-ary Tree consisting of N nodes and an array queries[], the task is to implement the functions Lock, Unlock and Upgrade for the given tree. 
For each query in queries[], the functions return true when the operation is performed successfully, otherwise it returns false. The functions are defined as: 


X: Name of the node in the tree and will be unique
uid: User Id for the person who accesses node X


1. Lock(X, uid): Lock takes exclusive access to the subtree rooted.
Once Lock(X, uid) succeeds, then lock(A, any user) should fail, where A is a descendant of X.
Lock(B. any user) should fail where X is a descendant of B.
Lock operation cannot be performed on a node that is already locked.


2. Unlock(X, uid): To unlock the locked node.
The unlock reverts what was done by the Lock operation.
It can only be called on same and unlocked by same uid.


3. UpgradeLock(X, uid): The user uid can upgrade their lock to an ancestor node.
It is only possible if any ancestor node is only locked by the same user uid.
The Upgrade should fail if there is any node that is locked by some other uid Y below.

I/O - 

Input -

7
2
5
World
Asia
Africa
China
India
South Africa
Egypt
1 China 9
1 India 9
3 Asia 9
2 India 9
2 Asia 9

Output- 

true
true
true
false
true

Expected Time Complexity - O(Logmn)
Expected Time Complexity - O(N)


####################################################################################################SOLUTION###########################################################################################################################
import java.util.*;
import java.io.*;

public class Main{
    
    static class Node{
        String name;
        Node parent;
        boolean isLocked;
        int id;
        int anc_locked;
        int des_locked;
        ArrayList<Node> child = new ArrayList<>();
        public Node(String name , Node parent){
            this.name = name;
            this.parent = parent;
        }
    }
    
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;
  
        public FastReader(){
            br = new BufferedReader(new InputStreamReader(System.in));
        }
  
        String next(){
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
  
        int nextInt() { return Integer.parseInt(next()); }
  
        long nextLong() { return Long.parseLong(next()); }

        String nextLine(){
            String str = "";
            try {
                if(st.hasMoreTokens()){
                    str = st.nextToken("\n");
                }
                else{
                    str = br.readLine();
                }
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
    
    public static void main(String[] args) throws Exception{
        FastReader scn = new FastReader();
        int n = scn.nextInt();
        int k = scn.nextInt();
        int q = scn.nextInt();
        
        String[] nodes = new String[n];
        for(int i = 0 ; i < n ; i++){
            nodes[i] = scn.nextLine();
        }
        
        String[] queries = new String[q];
        for(int i = 0 ; i < q ; i++){
            queries[i] = scn.nextLine();
        }
        
        Map<String , Node> map = new HashMap<>();
        Node root = new Node(nodes[0] , null);
        map.put(nodes[0], root);
        
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int ind = 1;
        
        while(queue.size() > 0 && ind < n){
            int size = queue.size();
            while(size-->0){
                Node rem = queue.remove();
                for(int i = 1 ; i <= k && ind < n ; i++){
                    Node node = new Node(nodes[ind] , rem);
                    map.put(nodes[ind],node);
                    rem.child.add(node);
                    queue.add(node);
                    ind++;
                }
            }
        }
        
        boolean ans;
        for(String query : queries){
            
            String[] parts = query.split(" ");
            
            if(parts[0].equals("1")){
                ans = lock(map.get(parts[1]) , Integer.parseInt(parts[2]));
            }else if(parts[0].equals("2")){
                ans = unlock(map.get(parts[1]) , Integer.parseInt(parts[2]));
            }else{
                ans = upgrade(map.get(parts[1]) , Integer.parseInt(parts[2]));
            }
            
            System.out.println(ans);
            
        }
        
    }
    
    public static boolean lock(Node node , int id){
        if(node.isLocked){
            return false;
        }
        
        if(node.anc_locked > 0 ||node.des_locked >0){
            return false;
        }
        
        Node cur = node.parent;
        
        while(cur != null){
            cur.des_locked += 1;
            cur = cur.parent;
        }
        
        informDescendant(node , 1);
        node.isLocked = true;
        node.id=id;
        
        return true;
    }
    
    public static boolean unlock(Node node , int id){
        if(!node.isLocked || node.id!=id){
            return false;
        }
        
        Node cur = node.parent;
        
        while(cur!=null){
            cur.des_locked-=1;
            cur=cur.parent;
        }
        
        informDescendant(node , -1);
        node.isLocked=false;
        node.id=0;
        
        return true;
    }
    
    public static boolean upgrade(Node node , int id){
        if(node.isLocked || node.anc_locked > 0 || node.des_locked == 0){
            return false;
        }
        
        ArrayList<Node> child = new ArrayList<>();
        
        boolean res = getAllChild(node , child, id);
        if(!res) return false;
        
        informDescendant(node , 1);
        
        for(Node k : node.child){
            unlock(k , id);
        }
        
        node.isLocked = true;
        node.id=id;
        
        return true;
    }
    
    public static void informDescendant(Node node , int val){
        if(node==null) return;
        node.anc_locked+=val;
        for(Node des : node.child){
            informDescendant(des , 1);
        }
        
    }
    
    public static boolean getAllChild(Node node , ArrayList<Node> child , int id){
        if(node == null){
            return false;
        }
        
        if(node.isLocked){
            if(node.id!=id){
                return false;
            }else{
                child.add(node);
            }
        }
        
        if(node.des_locked == 0){
            return true;
        }
        
        for(Node k : node.child){
            boolean res = getAllChild(k , child , id);
            if(!res){
                return false;
            }
        }
        
        return true;
        
    }
    
}

