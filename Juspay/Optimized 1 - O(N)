import java.util.*;
import java.io.*;

public class Main {
    
    static class Node {
        String name;
        Node parent;
        boolean isLocked;
        int id;
        ArrayList<Node> child = new ArrayList<>();
        
        public Node(String name, Node parent) {
            this.name = name;
            this.parent = parent;
        }
    }
    
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;
  
        public FastReader(){
            br = new BufferedReader(new InputStreamReader(System.in));
        }
  
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
  
        int nextInt() { return Integer.parseInt(next()); }
  
        long nextLong() { return Long.parseLong(next()); }

        String nextLine() {
            String str = "";
            try {
                if(st.hasMoreTokens()){
                    str = st.nextToken("\n");
                }
                else{
                    str = br.readLine();
                }
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
    
    public static void main(String[] args) throws Exception {
        FastReader scn = new FastReader();
        int n = scn.nextInt();
        int k = scn.nextInt();
        int q = scn.nextInt();
        
        String[] nodes = new String[n];
        for(int i = 0 ; i < n ; i++) {
            nodes[i] = scn.nextLine();
        }
        
        String[] queries = new String[q];
        for(int i = 0 ; i < q ; i++) {
            queries[i] = scn.nextLine();
        }
        
        Map<String , Node> map = new HashMap<>();
        Node root = new Node(nodes[0] , null);
        map.put(nodes[0], root);
        
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int ind = 1;
        
        while(queue.size() > 0 && ind < n) {
            int size = queue.size();
            while(size-- > 0) {
                Node rem = queue.remove();
                for(int i = 1 ; i <= k && ind < n ; i++) {
                    Node node = new Node(nodes[ind] , rem);
                    map.put(nodes[ind], node);
                    rem.child.add(node);
                    queue.add(node);
                    ind++;
                }
            }
        }
        
        boolean ans;
        for(String query : queries) {
            String[] parts = query.split(" ");
            
            if(parts[0].equals("1")) {
                ans = lock(map.get(parts[1]) , Integer.parseInt(parts[2]));
            } else if(parts[0].equals("2")) {
                ans = unlock(map.get(parts[1]) , Integer.parseInt(parts[2]));
            } else {
                ans = upgrade(map.get(parts[1]) , Integer.parseInt(parts[2]));
            }
            
            System.out.println(ans);
        }
    }
    
    public static boolean lock(Node node , int id) {
        if(node.isLocked) {
            return false;
        }
        
        if(isDescendantLocked(node)) {
            return false;
        }
        
        informAncestors(node , 1);
        node.isLocked = true;
        node.id = id;
        
        return true;
    }
    
    public static boolean unlock(Node node , int id) {
        if(!node.isLocked || node.id != id) {
            return false;
        }
        
        informAncestors(node , -1);
        node.isLocked = false;
        node.id = 0;
        
        return true;
    }
    
    public static boolean upgrade(Node node , int id) {
        if(node.isLocked || isAncestorLocked(node) || !isDescendantLocked(node)) {
            return false;
        }
        
        ArrayList<Node> child = new ArrayList<>();
        boolean res = getAllChild(node , child, id);
        
        if(!res) {
            return false;
        }
        
        informAncestors(node , 1);
        
        for(Node k : node.child) {
            unlock(k , id);
        }
        
        node.isLocked = true;
        node.id = id;
        
        return true;
    }
    
    public static void informAncestors(Node node , int val) {
        if(node == null) {
            return;
        }
        
        node.isLocked = val == 1;
        
        for(Node anc : node.child) {
            informAncestors(anc , val);
        }
    }
    
    public static boolean isDescendantLocked(Node node) {
        if(node == null) {
            return false;
        }
        
        if(node.isLocked) {
            return true;
        }
        
        for(Node des : node.child) {
            if(isDescendantLocked(des)) {
                return true;
            }
        }
        
        return false;
    }
    
    public static boolean isAncestorLocked(Node node) {
        if(node == null || node.parent == null) {
            return false;
        }
        
        if(node.parent.isLocked) {
            return true;
        }
        
        return isAncestorLocked(node.parent);
    }
    
    public static boolean getAllChild(Node node , ArrayList<Node> child , int id) {
        if(node == null) {
            return false;
        }
        
        if(node.isLocked) {
            if(node.id != id) {
                return false;
            } else {
                child.add(node);
            }
        }
        
        for(Node k : node.child) {
            boolean res = getAllChild(k , child , id);
            
            if(!res) {
                return false;
            }
        }
        
        return true;
    }
}
